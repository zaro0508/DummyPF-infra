Description: Test app
AWSTemplateFormatVersion: 2010-09-09
Parameters:
  AwsEbNotificationEndpoint:
    Type: String
    Description: Email address for AWS EB notifications
    Default: param_place_holder
    NoEcho: true
  AwsVpcSubnetPrefix:
    Description: The VPC subnet prefix (i.e. 172.32)
    Type: String
    Default: param_place_holder
  SSLCertArn:
    Description: SSL certificate for load balancer
    Type: String
    Default: param_place_holder
  ElastiCacheInstanceType:
    Type: String
    Description: Instance type to use for Elastic Cache cluster
    Default: cache.t2.micro
    AllowedValues:
      - cache.t2.micro
      - cache.t2.small
      - cache.t2.medium
      - cache.m3.medium
      - cache.m3.large
      - cache.m3.xlarge
      - cache.m3.2xlarge
      - cache.r3.large
      - cache.r3.xlarge
      - cache.r3.2xlarge
      - cache.r3.4xlarge
      - cache.r3.8xlarge
Resources:
  AWSEC2VPC:
    Type: "AWS::EC2::VPC"
    Properties:
      CidrBlock: !Join
        - '.'
        - - !Ref AwsVpcSubnetPrefix
          - 0.0/16
      EnableDnsSupport: 'true'
      EnableDnsHostnames: 'true'
      InstanceTenancy: default
  AWSEC2InternetGateway:
    Type: "AWS::EC2::InternetGateway"
  AWSEC2VPCGatewayAttachment:
    Type: "AWS::EC2::VPCGatewayAttachment"
    Properties:
      InternetGatewayId: !Ref AWSEC2InternetGateway
      VpcId: !Ref AWSEC2VPC
  AWSLBSecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: Load Balancer Security Group
      VpcId: !Ref AWSEC2VPC
      SecurityGroupIngress:
        - CidrIp: 0.0.0.0/0
          FromPort: '443'
          ToPort: '443'
          IpProtocol: tcp
        - CidrIp: 0.0.0.0/0
          FromPort: '80'
          ToPort: '80'
          IpProtocol: tcp
      SecurityGroupEgress:
        - CidrIp: 0.0.0.0/0
          FromPort: '80'
          ToPort: '80'
          IpProtocol: tcp
  AWSEC2SecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    DependsOn: AWSLBSecurityGroup
    Properties:
#      GroupName: !Join
#        - '-'
#        - - !Ref 'AWS::StackName'
#          - AWSEC2SecurityGroup
      GroupDescription: EC2 Security Group
      VpcId: !Ref AWSEC2VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: '80'
          ToPort: '80'
          SourceSecurityGroupId: !Ref AWSLBSecurityGroup
  AWSECacheSecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
#    Type: 'AWS::ElastiCache::SecurityGroup'
    Properties:
      GroupDescription: ElastiCache Security Group
      VpcId: !Ref AWSEC2VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: '6379'
          ToPort: '6379'
          SourceSecurityGroupId: !Ref AWSEC2SecurityGroup
#  AWSECacheSecurityGroupIngress:
#    Type: 'AWS::ElastiCache::SecurityGroupIngress'
#    DependsOn:
#      - AWSECacheSecurityGroup
#      - AWSEC2SecurityGroup
#    Properties:
#      CacheSecurityGroupName: !Ref AWSECacheSecurityGroup
#      EC2SecurityGroupName: !Join
#        - '-'
#        - - !Ref 'AWS::StackName'
#          - AWSEC2SecurityGroup
#      EC2SecurityGroupOwnerId: !Ref 'AWS::AccountId'

#  AWSSNSTopic:
#    Type: "AWS::SNS::Topic"
#    Properties:
#      Subscription:
#        -
#          Endpoint: !Ref AwsEbNotificationEndpoint
#          Protocol: "email"
  AWSEC2NetworkAcl:
    Type: "AWS::EC2::NetworkAcl"
    Properties:
      VpcId: !Ref AWSEC2VPC
  AWSEC2NetworkAclEntryIngress:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId: !Ref AWSEC2NetworkAcl
      RuleNumber: '100'
      Protocol: "-1"
      RuleAction: allow
      CidrBlock: 0.0.0.0/0
  AWSEC2NetworkAclEntryEgress:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId: !Ref AWSEC2NetworkAcl
      RuleNumber: '100'
      Egress: true
      Protocol: "-1"
      RuleAction: allow
      CidrBlock: 0.0.0.0/0
  AWSEC2SubnetNetworkAclAssociationUsEast1a:
    Type: "AWS::EC2::SubnetNetworkAclAssociation"
    Properties:
      SubnetId: !Ref AWSEC2SubnetUsEast1a
      NetworkAclId: !Ref AWSEC2NetworkAcl
  AWSEC2SubnetUsEast1a:
    Type: "AWS::EC2::Subnet"
    Properties:
      MapPublicIpOnLaunch: true
      VpcId: !Ref AWSEC2VPC
      CidrBlock: !Join
        - '.'
        - - !Ref AwsVpcSubnetPrefix
          - 0.0/20
      AvailabilityZone: !Select
        - 0
        - Fn::GetAZs: ""
  AWSEBLoadBalancer:
    Type: 'AWS::ElasticLoadBalancing::LoadBalancer'
    DependsOn:
      - AWSEC2SubnetUsEast1a
    Properties:
      SecurityGroups:
        - !Ref AWSEC2LoadBalancerSecurityGroup
      Listeners:
        - LoadBalancerPort: '80'
          Protocol: HTTP
          InstancePort: '80'
        - LoadBalancerPort: '443'
          Protocol: HTTPS
          SSLCertificateId: !Ref SSLCertArn
          InstanceProtocol: HTTP
          InstancePort: '80'
      Policies: []
      Subnets:
        - !Ref AWSEC2SubnetUsEast1a
      HealthCheck:
        Target: !Join
          - ''
          - - 'HTTP:'
            - 80
            - /?study=api
        UnhealthyThreshold: '5'
        Timeout: '5'
        HealthyThreshold: '3'
        Interval: '10'
  AWSEC2LoadBalancerSecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: >-
        Elastic Beanstalk created security group used when no ELB security
        groups are specified during ELB creation
      VpcId: !Ref AWSEC2VPC
      SecurityGroupIngress:
        - CidrIp: 0.0.0.0/0
          FromPort: '443'
          ToPort: '443'
          IpProtocol: tcp
        - CidrIp: 0.0.0.0/0
          FromPort: '80'
          ToPort: '80'
          IpProtocol: tcp
      SecurityGroupEgress:
        - CidrIp: 0.0.0.0/0
          FromPort: '80'
          ToPort: '80'
          IpProtocol: tcp
  AWSECSubnetGroup:
    Type: 'AWS::ElastiCache::SubnetGroup'
    Properties:
      Description: Elasticache Subnet Group
      SubnetIds:
        - !Ref AWSEC2SubnetUsEast1a

  AWSECCacheCluster:
    Type: 'AWS::ElastiCache::CacheCluster'
    DependsOn: AWSECacheSecurityGroup
    Properties:
      Engine: redis
      CacheNodeType: !Ref ElastiCacheInstanceType
      NumCacheNodes: '1'
      VpcSecurityGroupIds:
        - !Ref AWSECacheSecurityGroup
      CacheSubnetGroupName: !Ref AWSECSubnetGroup

#      CacheSecurityGroupNames:
#        - !Ref AWSECacheSecurityGroup